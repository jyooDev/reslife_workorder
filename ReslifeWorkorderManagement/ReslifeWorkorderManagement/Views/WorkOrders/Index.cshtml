@model IEnumerable<ReslifeWorkorderManagement.Models.WorkOrder>

@{
    ViewData["Title"] = "WorkOrders";
    Layout = "_Staff-Layout";
}

<div id="PlaceHolderHere"></div>

<div class="wrapper">
    <h1>Work Orders</h1>

    <table>
        <thead>
            <tr>
                <th>
                    Name
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Request)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Building)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Area)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Floor)
                </th>
                <th>
                    Room
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Progress)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Note)
                </th>
                <th>
                    Assignee
                </th>
                <th>
                    Action
                </th>
            </tr>
        </thead>
        <tbody>
    @foreach (var item in Model) {
            <tr>
                <td data-cell="name">
                    @Html.DisplayFor(modelItem => item.RequesterFirstName)  @Html.DisplayFor(modelItem => item.RequesterLastName)
                </td>
                <td data-cell="request">
                    @Html.DisplayFor(modelItem => item.Request)
                </td>
                <td data-cell="building">
                    @Html.DisplayFor(modelItem => item.Building)
                </td>
                <td data-cell="area">
                    @Html.DisplayFor(modelItem => item.Area)
                </td>
                <td data-cell="floor">
                    @Html.DisplayFor(modelItem => item.Floor)
                </td>
                <td data-cell="room">
                    @Html.DisplayFor(modelItem => item.RoomNumber)
                </td>
                <td data-cell="progress">
                        <select asp-for="@item.Progress"
                                class="badge progress-dropdown"
                                asp-items="Html.GetEnumSelectList<ReslifeWorkorderManagement.Models.Progress>()"
                                onchange="updateProgress(this)"
                                data-url="@Url.Action("UpdateProgress", "WorkOrders", new { id = item.Id })"
                                data-id="@item.Id">
                        </select>
                </td>
                <td data-cell="note">
                    @Html.DisplayFor(modelItem => item.Note)
                </td>
                <td data-cell="assignee">
                    @Html.DisplayFor(modelItem => item.WorkOrderAssignee.Id)
                </td>
                <td data-cell="action">
                    <button data-toggle="modal" data-url="@Url.Action("Edit", "WorkOrders", new { id = item.Id })" class="edit-icon-btn">
                        <i class="bi bi-pencil edit-icon"></i>
                    </button>
                    <button data-toggle="modal" data-url="@Url.Action("Details", "WorkOrders", new { id = item.Id })" class="details-icon-btn">
                            <i class="bi bi-journal-text details-icon"></i>
                    </button>
                    <button data-toggle="modal" data-url="@Url.Action("Delete", "WorkOrders", new { id = item.Id })" class="delete-icon-btn">
                        <i class="bi bi-trash details-icon"></i>
                    </button>
                </td>
            </tr>
    }
        </tbody>
    </table>
</div>

<div class="full-width-container mobile-view">
    @foreach (var item in Model)
    {
        <div class="card-container">
            <div class="bg-light p-4 rounded shadow">
                <!-- Top Row: Name, Email, Status -->
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <div>
                        <strong>@Html.DisplayFor(modelItem => item.RequesterFirstName) @Html.DisplayFor(modelItem => item.RequesterLastName)</strong>
                    </div>
                    <div>
                        @Html.DisplayFor(modelItem => item.RequesterEmail)
                     </div>
                    @if (item.Progress == Progress.Requested)
                    {
                        <div class="badge progress-requested text-uppercase">
                            @Html.DisplayFor(modelItem => item.Progress)
                        </div>
                    }
                    else if (item.Progress == Progress.InProgress)
                    {
                        <div class="badge progress-inprogress text-uppercase">
                            @Html.DisplayFor(modelItem => item.Progress)
                        </div>
                    }
                    else
                    {
                        <div class="badge progress-complete text-uppercase">
                            Complete
                        </div>
                    }
                </div>

                <!-- Request Content -->
                <div class="text-secondary mb-2">
                    Request: @Html.DisplayFor(modelItem => item.Request)
                </div>

                <!-- Assignee -->
                <div class="badge assignee-box">
                    Assigned to @Html.DisplayFor(modelItem => item.WorkOrderAssignee.Id)
                </div>
            </div>
        </div>
    }
</div>

<style>
    .edit-icon{
        color:brown;
    }

    .details-icon{
        color: black;
    }

    .delete-icon{
        color: black;
    }

    .progress-dropdown{
        padding: 0.5rem 0.75rem;
        border-radius: 10px;
        text-decoration: none;
        outline: none;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        border: none;
        appearance: none;
    }
    .progress-dropdown.progress-requested {
        background-color: rgba(180, 16, 49, 0.33);
        color: rgb(112, 0, 23);
    }

    .progress-dropdown.progress-inprogress {
        background-color: rgba(255, 187, 17, 0.33);
        color: rgba(161, 115, 0);
    }

    .progress-dropdown.progress-complete {
        background-color: rgba(95, 207, 98, 0.51);
        color: rgba(40, 84, 42);
    }

    .assignee-box{
        background-color: rgba(116, 116, 116, 0.86);
    }
    table{
        background-color: #f7f7f7;
        color: black;
    }

    th,
    td {
        padding: 1rem;
    }

    thead{
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
    th{
        position: sticky;
        text-align: left;
    }

    tr:nth-of-type(2n) {
        background: hsl(0 50% 0% / 0.05);
    }


    /* Mobile View */

    .mobile-view{
        display: none;
    }

    @@media (max-width: 768px) {
        table {
            display: none;
        }

        .mobile-view{
            display: grid;
        }
    }

    /* Container spans full width of the viewport */
    .full-width-container {
        width: 100%;
        padding: 0;
        margin: 0;
        box-sizing: border-box;
    }

    /* Each card container takes full width */
    .card-container {
        width: 100%; /* Full width */
        padding: 0 10px; /* Add padding for spacing between cards and edges */
        margin-bottom: 15px; /* Space between cards */
        box-sizing: border-box;
    }
</style>

<script>
    document.addEventListener("DOMContentLoaded", (event) => {
        styleAllProgressDropdown();
    });

    function styleAllProgressDropdown() {
        const ProgressDropdown = document.querySelectorAll(".progress-dropdown");
        ProgressDropdown.forEach((element) => {
            const progress = element.value;
            if (progress == 0) {
                element.classList.add("progress-requested");
            }
            else if (progress == 1) {
                element.classList.add("progress-inprogress");
            }
            else {
                element.classList.add("progress-complete");
            }
        });
    }

    function styleProgressDropdown(id, newProgress) {
        const element = document.querySelector(`.progress-dropdown[data-id="${id}"]`);
        console.log(element);
        if (!element) {
            console.error(`No dropdown found with data-id="${id}"`);
            return;
        }       
        element.className = "";
        element.classList.add("badge");
        element.classList.add("progress-dropdown");
        if (newProgress == 0) {
            element.classList.add("progress-requested");
        }
        else if (newProgress == 1) {
            element.classList.add("progress-inprogress");
        }
        else {
            element.classList.add("progress-complete");
        }
    }

    function updateProgress(selectElement) {

        const newProgress = selectElement.value;
        var url = $(selectElement).data('url');
        var sendData = {
            newProgress: newProgress
        };

        console.log('URL: ', url);
        console.log("Progress", newProgress);

        $.post(url, sendData).done(function (response) {
            console.log('Response Success: ', response.success);
            if (response.success) {
                styleProgressDropdown(response.workOrderId, response.progress);
            }
            else {
                if (!(response.message == undefined)) {
                    alert(response.message);
                }
            }
        }).fail(function () {
            alert("Failed to update status.")
        });
    }
</script>